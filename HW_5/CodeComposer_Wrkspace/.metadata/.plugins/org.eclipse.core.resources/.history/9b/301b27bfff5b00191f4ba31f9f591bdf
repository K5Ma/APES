/*
 * My_TMP102_Driver.c
 *
 *  Created on: Apr 10, 2019
 *      Author: Khalid AlAwadhi
 *
 *  # ALL INFO CAN BE FOUND IN THE .h FILE #
 */
#include "My_TMP102_Driver.h"

//Standard includes
#include <stdint.h>
#include <stdbool.h>
#include <string.h>

//TivaWare includes
#include "inc/hw_memmap.h"
#include "driverlib/pin_map.h"
#include "driverlib/i2c.h"

//FreeRTOS includes

//My includes


void I2CSendByte(uint8_t target_address, uint8_t register_address, uint8_t data)
{
   //
   // Tell the master module what address it will place on the bus when
   // communicating with the slave.  Set the address to LUX_SENSOR
   // (as set in the slave module).  The receive parameter is set to false
   // which indicates the I2C Master is initiating a writes to the slave.  If
   // true, that would indicate that the I2C Master is initiating reads from
   // the slave.
   //
   I2CMasterSlaveAddrSet(I2C0_BASE, target_address, false);

   //
   // Place the data to be sent in the data register
   //
   I2CMasterDataPut(I2C0_BASE, register_address);

   //
   // Initiate send of data from the master.
   //
   I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_SINGLE_SEND);


   //
   // Wait until master module is says it's busy. Errata I2C#08
   //
   while(!I2CMasterBusy(I2C0_BASE));


   /*
   ** now wait for it to be non-busy
   */
   while(I2CMasterBusy(I2C0_BASE));

   //
   // Place the data to be sent in the data register
   //
   I2CMasterDataPut(I2C0_BASE, data);

   //
   // Initiate send of data from the master.
   //
   I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_SINGLE_SEND);


   //
   // Wait until master module is says it's busy. Errata I2C#08
   //
   while(!I2CMasterBusy(I2C0_BASE));

   //
   // Wait until master module is done
   //
   while(I2CMasterBusy(I2C0_BASE));

}

uint8_t I2CGetByte(uint8_t target_address, uint8_t register_address)
{
   //
   // Tell the master module what address it will place on the bus when
   // communicating with the slave.  Set the address to LUX_SENSOR
   // (as set in the slave module).  The receive parameter is set to false
   // which indicates the I2C Master is initiating a writes to the slave.  If
   // true, that would indicate that the I2C Master is initiating reads from
   // the slave.
   //
   I2CMasterSlaveAddrSet(I2C0_BASE, target_address, false);

   //
   // Place the data to be sent in the data register
   //
   I2CMasterDataPut(I2C0_BASE, register_address);

   //
   // Initiate send of data from the master.  Since the loopback
   // mode is enabled, the master and slave units are connected
   // allowing us to receive the same data that we sent out.
   //
   I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_SINGLE_SEND);


   //
   // Wait until master module is says it's busy. Errata I2C#08
   //
   while(!I2CMasterBusy(I2C0_BASE));


   //
   // Wait until master module is done
   //
   while(I2CMasterBusy(I2C0_BASE));

   /*
   ** now switch to read mode
   */
   I2CMasterSlaveAddrSet(I2C0_BASE, target_address, true);

   /*
   ** read one byte
   */
   I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_SINGLE_RECEIVE);


   //
   // Wait until master module is says it's busy. Errata I2C#08
   //
   while(!I2CMasterBusy(I2C0_BASE));


   //
   // Wait until master module is done
   //
   while(I2CMasterBusy(I2C0_BASE));

   return I2CMasterDataGet(I2C0_BASE);
}

uint16_t I2CGet2Bytes(uint8_t target_address, uint8_t register_address)
{
   //
   // Tell the master module what address it will place on the bus when
   // communicating with the slave.  Set the address to LUX_SENSOR
   // (as set in the slave module).  The receive parameter is set to false
   // which indicates the I2C Master is initiating a writes to the slave.  If
   // true, that would indicate that the I2C Master is initiating reads from
   // the slave.
   //
   I2CMasterSlaveAddrSet(I2C0_BASE, target_address, false);

   //
   // Place the data to be sent in the data register
   //
   I2CMasterDataPut(I2C0_BASE, register_address);

   //
   // Initiate send of data from the master.  Since the loopback
   // mode is enabled, the master and slave units are connected
   // allowing us to receive the same data that we sent out.
   //
   I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_SINGLE_SEND);


   //
   // Wait until master module is says it's busy. Errata I2C#08
   //
   while(!I2CMasterBusy(I2C0_BASE));


   //
   // Wait until master module is done
   //
   while(I2CMasterBusy(I2C0_BASE));

   /*
   ** now switch to read mode
   */
   I2CMasterSlaveAddrSet(I2C0_BASE, target_address, true);

   /*
   ** read one byte
   */
   I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_BURST_RECEIVE_START);


   //
   // Wait until master module is says it's busy. Errata I2C#08
   //
   while(!I2CMasterBusy(I2C0_BASE));


   //
   // Wait until master module is done
   //
   while(I2CMasterBusy(I2C0_BASE));

   uint32_t data_one = I2CMasterDataGet(I2C0_BASE);

   /*
   ** read one byte
   */
   I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_BURST_RECEIVE_FINISH);


   //
   // Wait until master module is says it's busy. Errata I2C#08
   //
   while(!I2CMasterBusy(I2C0_BASE));


   //
   // Wait until master module is done
   //
   while(I2CMasterBusy(I2C0_BASE));

   uint32_t data_two = I2CMasterDataGet(I2C0_BASE);

   return (data_one << 8) | data_two;
}



void TMP102_OpenPointerRegister(uint8_t pointerReg)
{
	/* Start with WRITE */
	I2CMasterSlaveAddrSet(I2C0_BASE, TMP102_ADDR, WRITE);

	/* Place the DATA to be sent in the data register */
	I2CMasterDataPut(I2C0_BASE, pointerReg);

	/* Initiate DATA transfer from the MASTER */
	I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_SINGLE_SEND);

	/* Wait until master module is says it's busy. !! Errata I2C#08 !! */
	while(!I2CMasterBusy(I2C0_BASE));
	/* Wait until MASTER is done */
	while(I2CMasterBusy(I2C0_BASE));
}


uint8_t TMP102_ReadRegister(bool RegisterNumber)
{
	/* Register data will be stored here */
	uint8_t RegisterByte[2];

	/* Start with READ */
	I2CMasterSlaveAddrSet(I2C0_BASE, TMP102_ADDR, READ);

	/* Read first byte(MSB): */
	I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_BURST_RECEIVE_START);

	/* Wait until master module is says it's busy. !! Errata I2C#08 !! */
	while(!I2CMasterBusy(I2C0_BASE));
	/* Wait until MASTER is done */
	while(I2CMasterBusy(I2C0_BASE));

	uint8_t MSB_Data = I2CMasterDataGet(I2C0_BASE);

	/* Done reading MSB */
	I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_BURST_RECEIVE_FINISH);

	/* Wait until master module is says it's busy. !! Errata I2C#08 !! */
	while(!I2CMasterBusy(I2C0_BASE));
	/* Wait until MASTER is done */
	while(I2CMasterBusy(I2C0_BASE));

	/* Read second byte(LSB): */
	uint8_t LSB_Data = I2CMasterDataGet(I2C0_BASE);

	RegisterByte[0] = MSB_Data;
	RegisterByte[1] = LSB_Data;

	return RegisterByte[RegisterNumber];
}




void TMP102_Wakeup()
{
	/* Change pointer address to the Configuration Register */
	TMP102_OpenPointerRegister(CONFIG_REGISTER);

	/* Read current configuration register value */
	uint8_t RegisterByte = TMP102_ReadRegister(0);

	/* Clear ShutDown (SD) BIT 0 of first byte */
	RegisterByte &= 0xFE;

	/* Set the Configuration register with the updated byte */
	I2CSendByte(TMP102_ADDR, CONFIG_REGISTER, RegisterByte);
}




float TMP102_ReadTempC(void)
{
  uint8_t registerByte[2];	// Store the data from the register here
  int16_t digitalTemp;  // Temperature stored in TMP102 register

  // Read Temperature
  // Change pointer address to temperature register (0)
  TMP102_OpenPointerRegister(TEMPERATURE_REGISTER);
  // Read from temperature register
  registerByte[0] = TMP102_ReadRegister(0);
  registerByte[1] = TMP102_ReadRegister(1);

  // Bit 0 of second byte will always be 0 in 12-bit readings and 1 in 13-bit
  if(registerByte[1]&0x01)	// 13 bit mode
  {
	// Combine bytes to create a signed int
    digitalTemp = ((registerByte[0]) << 5) | (registerByte[1] >> 3);
	// Temperature data can be + or -, if it should be negative,
	// convert 13 bit to 16 bit and use the 2s compliment.
    if(digitalTemp > 0xFFF)
	{
      digitalTemp |= 0xE000;
    }
  }
  else	// 12 bit mode
  {
	// Combine bytes to create a signed int
    digitalTemp = ((registerByte[0]) << 4) | (registerByte[1] >> 4);
	// Temperature data can be + or -, if it should be negative,
	// convert 12 bit to 16 bit and use the 2s compliment.
    if(digitalTemp > 0x7FF)
	{
      digitalTemp |= 0xF000;
    }
  }
  // Convert digital reading to analog temperature (1-bit is equal to 0.0625 C)
  return digitalTemp*0.0625;
}
