/*
 * Logger_Task.c
 *
 *  Created on: Apr 8, 2019
 *      Author: ik5m
 */
#include "Logger_Task.h"

//Standard includes
#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>

//TivaWare includes
#include "driverlib/gpio.h"
#include "inc/hw_memmap.h"

//FreeRTOS includes
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"

//My includes
#include "Global_Defines.h"
#include "Master_Functions.h"

/* Global Variables */
extern QueueHandle_t xQueue_Logger;


uint8_t Logger_TaskInit()
{
    //Create task, if it fails return 1, else 0
    if( xTaskCreate(Logger_Task,					/* The function that implements the task */
			   (const portCHAR *)"Logger",			/* The text name assigned to the task - for debug only as it is not used by the kernel */
                configMINIMAL_STACK_SIZE,			/* The size of the stack to allocate to the task */
				NULL,								/* The parameter passed to the task */
				PRIORITY_LOGGER_TASK, 				/* The priority assigned to the task */
				NULL)								/* The task handle is not required, so NULL is passed */
    			!= pdTRUE
      )
      {
    	return 1;
      }

	return 0;
}



void Logger_Task(void *pvParameters)
{
	/* Create a queue capable of containing 50 messages */
	xQueue_Logger = xQueueCreate( 50, sizeof( MsgStruct * ) );

	if( xQueue_Logger == NULL )
	{
		/* Queue was not created and must not be used. */
		Log_UART(Logger, "CRITICAL", "Could not create xQueue_Logger! x_x");
	}
	else
	{
		Log_UART(Logger, "INFO", "Created xQueue_Logger successfully!");
	}

	struct MsgStruct *RXMessage;
	char Temp[100];

	while(1)
	{
		if( xQueue_Logger != 0 )
		{
			/* Receive a message on the created queue.
			 * Block for 10 ticks if a message is not immediately available */
			if( xQueueReceive( xQueue_Logger, &RXMessage, ( TickType_t ) 10 ) )
			{
				sprintf(Temp, "%s - No. of LED toggles: %d", RXMessage->Msg, RXMessage->Value);
				Log_UART(RXMessage->Source, "INFO", Temp);
			}
		}
	}

}
